import random

# -----START OF FUNCTIONS-----

# 1. List of instructions:


def instructions():

    print()
    print()
    print("----------INSTRUCTIONS-----------")
    print()
    print("For each round of the HL Game, you will be asked to...")
    print()
    print("- Enter a 'lower' and 'higher' boundary number. I will randomly")
    print("generate a secret number between your two chosen boundary numbers.")
    print()
    print("- Choose which mode to play: LIMITED MODE or INFINITE MODE.")
    print("LIMITED MODE gives you the decision to choose how many lives")
    print("(1 to 10) you will give yourself to guess the secret number.")
    print("If you run out of lives, you lose.")
    print("INFINITE MODE gives you infinite guesses, meaning it will not be")
    print("possible for you to lose a round without giving up.")
    print()
    print("The main goal of this game is to guess the 'secret' number. If you")
    print("manage to guess the secret number correctly, you win.")
    print()
    print("Everytime you guess the secret number incorrectly, you will be")
    print("given a point for your score, a hint, and the choice to either")
    print("keep playing, or give up. (THE SMALLER SCORE, THE BETTER.)")
    print()
    print("Mistakes such as not inputting an integer / inputting the same")
    print("incorrect number more than once for your guess will not be")
    print("counted for either removing a life in LIMITED MODE or adding")
    print("a point into your game score. You will simply have to try again.")
    print()
    print("The amount of rounds you want to play is your choice. All your")
    print("stats are always being calculated and will be shown once you")
    print("have decided to stop playing the game.")
    print()
    print("Good luck", name+"!")

# 2. (STARTING FUNCTIONS) Showing instructions function and creating loop:


def yes_no(question):

    valid = False
    while not valid:

        # Shows question. If the user says no, instructions are shown.

        print()
        playedbefore = input(question)
        if playedbefore in no:
            instructions()
            playedbefore = ("yes")
            print()
            input("Please enter ANYTHING to begin: ")
        if playedbefore in yes:
            print()
            print("Alright... here we go!")
            break

        # If the user doesn't input yes or no:

        else:
            invalid_input()

# Function that shows different outcomes depending on amount of
# replays and the previous mode and guess:


def againloop(counteragain):

    if counteragain > 0:
        print()
        print("▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄")
        print("Very well...  ROUND", counteragain + 1, "INITIATING...")
        print("▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀")
        if mode == '0':
            if guess == x:
                print()
                print("I will not lose this time!!!")

# 3. (REPEATED FUNCTIONS) Reveals the secret number:


def reveal_secret():

    print()
    print("๑۞๑,¸¸,ø¤º°`°๑۩๑۞๑,¸¸,ø¤º°`°๑۩๑۞๑,¸¸,ø¤º°`°๑۩")
    print("Unlucky", name+", my number was", x, "!!!")
    print("๑۞๑,¸¸,ø¤º°`°๑۩๑۞๑,¸¸,ø¤º°`°๑۩๑۞๑,¸¸,ø¤º°`°๑۩")

    # Error correction loop functions:


def error_correction():

    print()
    print("Error! An integer was not inputted. Try again!")


def invalid_input():

    print()
    print("Error! An invalid answer was inputted. Try again!")

# 4. (LATE FUNCTIONS) Showing different outcomes if the user wins:


def win_outcomes():

    # If it took 1 attempt to guess number correctly:

    if counter == 1:

        # If the boundaries are equal:

        if lower == upper:
            print()
            print("ROUND", counteragain, "WINNING SCORE:", counter,)
            print()
            print("...that's quite strange.")
            print()
            print("Aha! I see that both of your boundary numbers are equal.")
            print()
            print("You think you're so smart, don't you", name+"?")

        # If the boundaries are not equal:

        elif lower != upper:
            print()
            print("ROUND", counteragain, "WINNING SCORE:", counter)
            print()
            print("WOW!!! I must say you got a bit lucky there", name+".")

# If it took more than 1 attempt to guess number correctly:

    if counter > 1:
        print()
        print("↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦")
        print("ROUND", counteragain, "FINAL WINNING SCORE:", counter)
        print("↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦")

# Function that shows end game stats:


def end_stats():

    # If the user doesn't want to play again:

    print()
    print("Thank you for playing the HL Game", name+"!")
    print()
    print("░▒▓█░▒▓█░▒▓█░▒▓█░▒▓█░▒▓█░▒▓█░▒▓█░▒▓█")
    print("STATS:")

    # Prints all calculated end game stats:

    print("TOTAL AMOUNT OF GAMES PLAYED:", counteragain)
    print("TOTAL AMOUNT OF VALID GUESSES MADE:", totalcounter)
    print("WIN RATE:", (100 / counteragain) * wins, "%")
    print("LOSE RATE:", (100 / counteragain) * losses, "%")
    print("LOWEST/BEST WINNING SCORE:", min(counterlist))
    print("HIGHEST/WORST WINNING SCORE:", max(counterlist))
    print("MEAN OF VALID GUESSES PER GAME:", totalcounter / counteragain)
    print("░▒▓█░▒▓█░▒▓█░▒▓█░▒▓█░▒▓█░▒▓█░▒▓█░▒▓█")
    print()
    return

# -----END OF FUNCTIONS-----


# -----START-OF-MAIN-----

# 5. Print title command:

print()
print()
print()
print()
print()
print("  _    _  ______   _____  _    _  ______  ______")
print(" | |  | ||__  __| / ____|| |  | ||  ____||  __  \ ")
print(" | |__| |  |  |  | |  __ | |__| || |____ | |__/ / ")
print(" |  __  |  |  |  | | |_ ||  __  ||  ____||     \ ")
print(" | |  | | _|  |_ \ |__| || |  | || |____ |  |\  \ ")
print(" |_|  |_||______| \_____||_|  |_||______||__| \__\ ")
print("   ____   ______          _        ____   _    _  ______  ______")
print("  / __ \ |  __  \        | |      / __ \ | |  | ||  ____||  __  \ ")
print(" | |  | || |__/ /        | |     | |  | || |  | || |____ | |__/ / ")
print(" | |  | ||     \         | |     | |  | || |/\| ||  ____||     \ ")
print(" | |__| ||  |\  \        | |____ | |__| ||  /\  || |____ |  |\  \ ")
print("  \____/ |__| \__\       |______| \____/ |_/  \_||______||__| \__\ ")
print("   _____          __  __  ______ ")
print("  / ____|   /\   |  \/  ||  ____| ")
print(" | |  __   /  \  | \  / || |____ ")
print(" | | |_ | / /\ \ | |\/| ||  ____| ")
print(" \ |__| |/ ____ \| |  | || |____ ")
print("  \_____/_/    \_\_|  |_||______| ")
print()
print()
print()
print()
print()

# 6. List of useful variables and lists for the whole program:

wins = 0
losses = 0
counteragain = 0
totalcounter = 0
counterlist = ["n/a"]
yes = ['y', 'Y', 'yes', 'Yes', 'YEs', 'YES', 'yES', 'yeS', 'yEs', 'YeS']
no = ['n', 'N', 'no', 'No', 'nO', 'NO']

# Inputting name command:

nameinput = input("Hello user. What is your name?: ")

# Capitalizing name:

name = nameinput.title()
print()
print("Hello", name+". I am the program that you will be versing in the")
print("HIGHER OR LOWER GAME.")

# Print showing introductions function:

yes_no("Before we start, have you played this game before? y/n: ")

# 'Play again' loop command:

againtwo = ("yes")
while againtwo in yes:

    # Print game loop function on different outcomes:

    againloop(counteragain)

    # 7. Inputting lower and upper boundary commands:

    lower = 1
    upper = 0
    errorcounter = -1
    while lower > upper:
        try:
            print()
            lower = int(input("Please enter a lower boundary integer: "))
            print()
            upper = int(input("Now, please enter an upper boundary integer: "))

            # Error correction loop and number generator command:

            if lower > upper:
                invalid_input()
            if lower <= upper:
                x = random.randint(lower, upper)

        # If the user does not input an integer:

        except ValueError:
            error_correction()
            lower = 1
            upper = 0

        # CALCULATING SECRET NUMBER:

        if lower <= upper:
            print()
            print("¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,")
            print("       Alright. CALCULATING SECRET NUMBER...       ")
            print("`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º")

            # 8. Entering the user's preferred mode:

            print()
            print("Now, please ENTER '0' to activate LIMITED MODE or")
            mode = input("ENTER ANYTHING ELSE to activate INFINITE MODE: ")
            if mode == '0':
                print()
                print("Okay. LIMITED MODE has been activated.")

            # Inputting amount of lives between 1 and 10:

                while errorcounter < 1 or errorcounter > 10:
                    try:
                        print()
                        print("ENTER YOUR AMOUNT OF LIVES FOR THIS ROUND")
                        errorcounter = int(input("(between 1 to 10): "))

                        # Error correction loop:

                        if errorcounter < 1 or errorcounter > 10:
                            invalid_input()

                    # If the user does not input an integer:

                    except ValueError:
                        error_correction()

            # Counting amount of total rounds
            # + Identifying the user's selected mode:

            counteragain = counteragain + 1
            if mode != '0':
                print()
                print("Okay. INFINITE MODE has been activated.")
                print("Now let's play", name+"!")
            else:
                print()
                print("Alright", name+". Now let's play!")

            # 9. Resets all appropiate counter variables for a new round:

            counter = 0
            guess = ()
            guesslist = [""]
            finder = ()
            againone = ("no")

            # Loop function to 'try again' + inputting guess command:

            while againone in no:
                try:
                    detector = 0
                    counter = counter + 1
                    print()
                    guess = int(input("Go on, guess my number: "))

                    # Searching for a same guess user may've already inputted:

                    guesslist.append(guess)
                    for finder in guesslist:
                        if detector < counter:
                            detector = detector + 1
                            if finder == guess:
                                print()
                                print("You already guessed that!!! Try again!")
                                counter = counter - 1
                                guesslist.remove(finder)

                    # If the inputted integer is not in between the boundaries:

                    if lower <= guess <= upper:
                        pass
                    else:
                        print()
                        print("You must enter an integer between")
                        print("the boundaries!!! Try again!")
                        counter = counter - 1
                        guesslist.remove(guess)

                # If the user does not input an integer:

                except ValueError:
                    error_correction()
                    counter = counter - 1
                    guess = ()

        # 10. Detecting if the guess is valid:

                if type(guess) == int and detector == counter:

                    # If the guess is higher than the secret number:

                    if guess > x:
                        if mode == '0':
                            errorcounter = errorcounter - 1
                        print()
                        print("║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌║")
                        print("║▌║▌║Incorrect! Your number is too high!║▌║▌║")
                        print("║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌║")

                # If the guess is lower than the secret number:

                    elif guess < x:
                        if mode == '0':
                            errorcounter = errorcounter - 1
                        print()
                        print("║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌")
                        print("║▌║▌║Incorrect! Your number is too low!▌║▌║▌")
                        print("║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌║█│▌║▌║▌")

                    # Counting down number of guesses:

                    if guess != x and mode == '0':

                        # If there is more than 1 guess remaining:

                        if errorcounter > 1:
                            print()
                            print("▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄")
                            print("You have", errorcounter, "lives remaining!")
                            print("▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀")

                        # If there is exactly 1 more guess remaining:

                        elif errorcounter == 1:
                            print()
                            print("▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄")
                            print("▀▄▀▄▀You have 1 life remaining!!!▄▀▄▀▄")
                            print("▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄")

                        # If the user ran out of guesses + reveals secret
                        # number and adds to the amount of total losses:

                        elif errorcounter == 0:
                            print()
                            print("YOU LOST! you are out of lives!")
                            reveal_secret()
                            losses = losses + 1

                # 11. The choice to give up:

                    while guess != x and errorcounter != 0:
                        print()
                        againone = input("Do you want to give up? y/n: ")

                        # Breaks the loop if user does not give up:

                        if againone in no:
                            break

                # If the user gives up + reveals the secret number and adds
                # to the amount of total losses:

                        elif againone in yes:
                            errorcounter = 0
                            print()
                            print("YOU GAVE UP!!!")
                            reveal_secret()
                            losses = losses + 1

                    # Error correction loop:

                        else:
                            invalid_input()

            # 12. If the guess is correct + adds to the amount of total wins:

                if guess == x:
                    print()
                    print("๑۞๑,¸¸,ø¤º°`°๑۩๑۞๑,¸¸,ø¤º°`°๑۩๑۞๑,¸¸,ø¤º°`°๑۩๑۞๑,¸")
                    print("       CORRECT!!! my number was", x, "!!!       ")
                    print("๑۞๑,¸¸,ø¤º°`°๑۩๑۞๑,¸¸,ø¤º°`°๑۩๑۞๑,¸¸,ø¤º°`°๑۩๑۞๑,¸")

            # Counting the amount of wins
            # + Activating 'counterlist' as an integer list:

                    wins = wins + 1
                    if wins == 1:
                        counterlist.remove("n/a")
                    counterlist.append(counter)

                    # Different win outcomes function:

                    win_outcomes()

                # Command that determines if the user has finished a round:

                if guess == x or errorcounter == 0 or againone in yes:

                    # Showing the amount of wins and losses:

                    print()
                    print("↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦")
                    print("Wins:", wins, " | Losses:", losses)
                    print("↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦↦")

                    # Calculating total amount of guesses:

                    totalcounter = totalcounter + counter

                    # Breaks all the game loops + the 'play again' decision:

                    againone = ()
                    againtwo = ()
                    while againtwo != 'yes' or againtwo != 'no':
                        print()
                        againtwo = input("Would you like to play again? y/n: ")
                        if againtwo in yes:
                            break

                        # Shows the end game stats function:

                        elif againtwo in no:
                            end_stats()
                            break

                        # One last error correction loop:

                        else:
                            invalid_input()

# -----END-OF-MAIN-----
